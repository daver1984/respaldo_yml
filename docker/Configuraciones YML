#Bot
#version: '3.3'
services:
    docker-controller-bot:
        environment:
            - TELEGRAM_TOKEN=7281066440:AAE9i-fUU9Gkj-HyETfkB_UK-QRMnKKnojM
            - TELEGRAM_ADMIN=1818312382
            - CONTAINER_NAME=docker-controller-bot
            - TZ=America/Santiago
            #- TELEGRAM_GROUP=
            #- TELEGRAM_THREAD=1
            #- TELEGRAM_NOTIFICATION_CHANNEL=
            - CHECK_UPDATES=1
            - CHECK_UPDATE_EVERY_HOURS=168
            - BUTTON_COLUMNS=2
            - LANGUAGE=ES
            - EXTENDED_MESSAGES=0
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /etc/localtime:/etc/localtime:ro
        image: dgongut/docker-controller-bot:latest
        container_name: docker-controller-bot
        restart: always
        network_mode: host
        tty: true

#Duckdns
#Crear directorio en local /home/pi/docker/duckdns/ llamado /config.
---
services:
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    network_mode: host #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Santiago
      - SUBDOMAINS=daver2024
      - TOKEN=3c9b31c5-3a83-407e-befb-67ce78b43482
      - UPDATE_IP=ipv4 #optional
      - LOG_FILE=false #optional
    volumes:
      - /home/pi/docker/duckdns/config:/config
    restart: unless-stopped

#homeassistant
#Crear directorio llamado /config en ruta destino
services:
  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - /home/pi/docker/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host

#jellyfin
#Crear directorio /home/pi/docker/jellyfin/Library en ruta destino
#Carpeta compartida se encuentra en /mnt/nas/Series:/data/tvshows y en /mnt/nas/Peliculas:/data/movies
#version: "3.8"
services:
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Santiago
      - JELLYFIN_PublishedServerUrl=192.168.0.2
    volumes:
      - /home/pi/docker/jellyfin/Library:/config
      - /mnt/nas/Series:/data/tvshows
      - /mnt/nas/Peliculas:/data/movies
    ports:
      - 8096:8096
     # - 8920:8920 #optional
     # - 7359:7359/udp #optional
     # - 1900:1900/udp #optional
    restart: unless-stopped


#minecraft
#LEVEL_SEED=-6367239042471136353 Esto crea un mundo con harta naturaleza y recursos.
#version: '3.8'
services:
  minecraft-bedrock-server:
    image: itzg/minecraft-bedrock-server
    container_name: mc
    environment:
      - EULA=TRUE
      - SERVER_PORT=19132
      - DIFFICULTY=easy
      - LEVEL_SEED=-6367239042471136353
    ports:
      - "19132:19132/udp"
    volumes:
      - mc:/data
    restart: unless-stopped

volumes:
  mc:


#netdata
#version: '3'
services:
  netdata:
    image: netdata/netdata:edge
    container_name: netdata
    pid: host
    network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NETDATA_CLAIM_TOKEN=824AWbUP3Qag6yx3ru4F7ZLVbepxlQxKNMgd3B2zeU9YzJxz3H7z4LpI4E-0XqKcbqxRC1flgy6gseY1oYswSgjMTQr2TquPzbtU9rN8z1BTwO9ZOx0DhOjPw2VbXStK1yAu00o
      - NETDATA_CLAIM_URL=https://app.netdata.cloud
      - NETDATA_CLAIM_ROOMS=de9f46d3-cf37-4c70-99c0-b0a382a75284
volumes:
  netdataconfig:
  netdatalib:
  netdatacache:


#plex
#version: "3.8"
services:
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Santiago
      - VERSION=docker
      - PLEX_CLAIM=claim-pqhopRuGz_emx1VUcVd8
    volumes:
      - /home/pi/docker/plex/config:/config
      - /mnt/nas/Series:/tv
      - /mnt/nas/Peliculas:/movies
    restart: unless-stopped


#portainer
#version: "3.8"
services:
  portainer:
    image: portainer/portainer-ce:2.21.4
    container_name: portainer
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  portainer_data:



#WG-Pihole
#Aca configurar Modem y Router
#version: "3.8"
services:
  wg-easy:
    environment:
      # âš ï¸ Change the server's hostname (clients will connect to):
      - WG_HOST=daver2024.duckdns.org

      # âš ï¸ Change the Web UI Password:
      - PASSWORD_HASH=$$2a$$12$$2pih00YGQBEaq4XFUI9uLOR3arrxJqWsApd1GoidDcfjE6ry72pq6

      # ðŸ’¡ This is the Pi-Hole Container's IP Address
      - WG_DEFAULT_DNS=10.8.1.3
      - WG_DEFAULT_ADDRESS=10.8.0.x
    image: ghcr.io/wg-easy/wg-easy
    container_name: wg-easy
    volumes:
      - /home/pi/docker/wg-pihole:/etc/wireguard
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      wg-easy:
        ipv4_address: 10.8.1.2

  pihole:
    image: pihole/pihole
    container_name: pihole
    environment:
      # âš ï¸ Change the Web UI Password:
      - WEBPASSWORD=Fabito.2025@
    volumes:
      - /home/pi/docker/wg-pihole/config:/etc/pihole
      - /home/pi/docker/wg-pihole/dnsmasq.d:/etc/dnsmasq.d
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "5353:80/tcp"
    restart: unless-stopped
    networks:
      wg-easy:
        ipv4_address: 10.8.1.3

networks:
  wg-easy:
    ipam:
      config:
        - subnet: 10.8.1.0/24

